;; Ryan Barker
;; ECE 4220 Section 1
;; Takehome 1: Block Puzzler Solver
;; File: takehome1.clips

;; WM TEMPLATES ;;
(deftemplate cell "Template for a single cell on a board."
  (slot board (type INTEGER) (default 0)) ;; Differentiates facts for each board. ;;
  (slot row (type INTEGER) (default 0))
  (slot col (type INTEGER) (default 0))
  (slot contents (allowed-symbols S E o x B) (default x))
  (slot north (type INTEGER) (default 0))
  (slot south (type INTEGER) (default 0))
  (slot east (type INTEGER) (default 0))
  (slot west (type INTEGER) (default 0))
  (slot searched (allowed-symbols yes no) (default no))
  (slot in_final_path (allowed-symbols yes no) (default no))
  (slot adj_net (allowed-symbols yes no) (default no)) ;; See report for details on this slot. ;;
)

(deftemplate saved "Template to hold contents of block position."
  (slot board (type INTEGER) (default 0))
  (slot contents (allowed-symbols S E o))
)

(deftemplate board "Template for fact signifying the current board under analysis."
  (slot board (type INTEGER) (default 0))
)

(deftemplate print_board "Template for fact asserted to cause a board to print."
  (slot board (type INTEGER) (default 0))
)

(deftemplate solution_found "Template for fact asserted when a solution is found."
  (slot board (type INTEGER) (default 0))
)

(deftemplate final_path_found "Template for fact asserted when the final path in 
                               a board is finished calculating."
  (slot board (type INTEGER) (default 0))						
)

(deftemplate moved_away_from_end "Template for fact asserted when the block moves 
                                  away from the end a stored direction."
  (slot board (type INTEGER) (default 0))
  (slot dir (allowed-symbols N S E W))  
)

(deftemplate reset_move_aways "Template for fact asserted to delete move aways in a 
                               specified direction"
  (slot board (type INTEGER) (default 0))
  (slot dir (allowed-symbols N S E W))  
)

(deftemplate previousMove "Template used for checking cycles during movement algorithm."
  (slot board (type INTEGER) (default 0))
  (slot fromrow (type INTEGER) (default 0))
  (slot fromcol (type INTEGER) (default 0))
  (slot torow (type INTEGER) (default 0))
  (slot tocol (type INTEGER) (default 0))
)

(deftemplate delete_moves "Template for fact asserted when it is time to delete moves
                           between boards."
  (slot board (type INTEGER) (default 0))
)

;; -------------------------------------------------------------------------------------;;

;; RULES FOR BEGINNING ;;
(defrule startup "Displays program description on startup."
  (declare(salience 5)) ;; Used for priority over find-start command. ;;
  ?Startup <- (starting)
=>
  (printout t "Welcome to the ECE 4420 Takehome 1 Block Puzzle Solver!" crlf
              "This program will solve all five required boards sequentially." crlf
              "The cell containing the block in each printout is designated with "
			  "a 'B'." crlf crlf)  		  
  (retract ?Startup)
)

(defrule find-start "Places a block at the starting position of a board."
  ?Start <- (cell (board ?B) (row ?R) (col ?C) (contents S) (north ?N) 
                  (south ?S) (east ?E) (west ?W) (searched no))
  (not (board))
=> 
  (printout t "Moved block to starting position row " ?R " col " 
              ?C " on board " ?B "." crlf)
  
  (modify ?Start (contents B) (searched yes) (in_final_path yes) (adj_net yes))
  (assert (saved (board ?B) (contents S)))
  
  (assert (board (board ?B)))
  (assert (print_board (board ?B)))
)


;; PATH GENERATOR RULES ;;


;; STEP 1: 8 RULES - CALCULATE ADJACENCY NETWORK
(defrule search-adj-o-north "Rule for checking adjacent o's north of current cell."
  (declare (salience 10)) ;; Ensures entire adjacency network is calculated before moving on. ;;
  (board (board ?B))
  (cell (board ?B) (row ?R) (col ?C) (north ?N) (searched yes))
  (test (> ?N 0))
  ?North <- (cell (board ?B) (row ?N) (col ?C) (contents o) (searched no))
=> 
  (modify ?North (searched yes) (adj_net yes))
)

(defrule search-end-north "Rule for checking if the end is north of current cell."
  (declare (salience 10)) ;; Ensures entire adjacency network is calculated before moving on. ;;
  (board (board ?B))
  (cell (board ?B) (row ?R) (col ?C) (north ?N) (searched yes))
  (test (> ?N 0))
  ?End <- (cell (board ?B) (row ?N) (col ?C) (contents E) (searched no))
=> 
  (printout t "Found a solution to board " ?B 
              ". Optimizing final path..." crlf)
  (assert (solution_found (board ?B)))  
  (modify ?End (searched yes) (adj_net yes))
)

(defrule search-adj-o-south "Rule for checking adjacent o's south of current cell."
  (declare (salience 10)) ;; Ensures entire adjacency network is calculated before moving on. ;;
  (board (board ?B))
  (cell (board ?B) (row ?R) (col ?C) (south ?S) (searched yes))
  (test (> ?S 0))
  ?South <- (cell (board ?B) (row ?S) (col ?C) (contents o) (searched no))
=>
  (modify ?South (searched yes) (adj_net yes))
)

(defrule search-end-south "Rule for checking if the end is south of current cell."
  (declare (salience 10)) ;; Ensures entire adjacency network is calculated before moving on. ;;
  (board (board ?B))
  (cell (board ?B) (row ?R) (col ?C) (south ?S) (searched yes))
  (test (> ?S 0))
  ?End <- (cell (board ?B) (row ?S) (col ?C) (contents E) (searched no))
=> 
  (printout t "Found a solution to board " ?B 
              ". Optimizing final path..." crlf)
  (assert (solution_found (board ?B)))			   
  (modify ?End (searched yes) (adj_net yes))
)

(defrule search-adj-o-west "Rule for checking adjacent o's west of current cell."
  (declare (salience 10)) ;; Ensures entire adjacency network is calculated before moving on. ;;
  (board (board ?B))
  (cell (board ?B) (row ?R) (col ?C) (west ?W) (searched yes))
  (test (> ?W 0))
  ?West <- (cell (board ?B) (row ?R) (col ?W) (contents o) (searched no))
=> 
  (modify ?West (searched yes) (adj_net yes))
)

(defrule search-end-west "Rule for checking if the end is west of current cell."
  (declare (salience 10)) ;; Ensures entire adjacency network is calculated before moving on. ;;
  (board (board ?B))
  (cell (board ?B) (row ?R) (col ?C) (west ?W) (searched yes))
  (test (> ?W 0))
  ?End <- (cell (board ?B) (row ?R) (col ?W) (contents E) (searched no))
=>
  (printout t "Found a solution to board " ?B 
              ". Optimizing final path..." crlf)
  (assert (solution_found (board ?B)))
  (modify ?End (searched yes) (adj_net yes))
)

(defrule search-adj-o-east "Rule for checking adjacent o's east of current cell."
  (declare (salience 10)) ;; Ensures entire adjacency network is calculated before moving on. ;;
  (board (board ?B))
  (cell (board ?B) (row ?R) (col ?C) (east ?E) (searched yes))
  (test (> ?E 0))
  ?East <- (cell (board ?B) (row ?R) (col ?E) (contents o) (searched no))
=> 
  (modify ?East (searched yes) (adj_net yes))
)

(defrule search-end-east "Rule for checking if the end is east of current cell."
  (declare (salience 10)) ;; Ensures entire adjacency network is calculated before moving on. ;;
  (board (board ?B))
  (cell (board ?B) (row ?R) (col ?C) (east ?E) (searched yes))
  (test (> ?E 0))
  ?End <- (cell (board ?B) (row ?R) (col ?E) (contents E) (searched no))
=> 
  (printout t "Found a solution to board " ?B 
              ". Optimizing final path..." crlf)
  (assert (solution_found (board ?B)))
  (modify ?End (searched yes) (adj_net yes))
)

;; STEP 2: CHECK FOR NO SOLUTION AFTER ADJACENCY NETWORK IS FOUND ;;
(defrule check-no-solution "None of the rules below will fire for the current board if this rule fires."
  ?Board <- (board (board ?B))
  ?Saved <- (saved (board ?B))
  (not (solution_found (board ?B)))
=>
  (printout t "There is no solution to board " ?B "." crlf crlf)

  (retract ?Saved) ;; Clean up facts.
  (retract ?Board)  
)


;; STEP 3: GENERATING FIELD FOR FINAL PATH ;;

;; STEP 3.1: KILL DEAD ENDS ;;
(defrule kill-dead-end-north "Rule for eliminating north dead ends in the adjacency network."
  (board (board ?B))
  (solution_found (board ?B))
  ?Current <- (cell (board ?B) (row ?R) (col ?C) (north ?N) (south ?S) (east ?E) 
                    (west ?W) (contents o) (adj_net yes))
					
  (cell (board ?B) (row ?S) (col ?C) (adj_net yes))
  (or (not (cell (board ?B) (row ?N) (col ?C))) 
      (cell (board ?B)(row ?N) (col ?C) (adj_net no)))
  (or (not (cell (board ?B) (row ?R) (col ?E))) 
      (cell (board ?B) (row ?R) (col ?E) (adj_net no)))
  (or (not (cell (board ?B) (row ?R) (col ?W))) 
      (cell (board ?B) (row ?R) (col ?W) (adj_net no)))
=>
  (modify ?Current (adj_net no))
)

(defrule kill-dead-end-south "Rule for eliminating south dead ends in the adjacency network."
  (board (board ?B))
  (solution_found (board ?B))
  ?Current <- (cell (board ?B) (row ?R) (col ?C) (north ?N) (south ?S) (east ?E)
              (west ?W) (contents o) (adj_net yes))
			  
  (cell (board ?B) (row ?N) (col ?C) (adj_net yes))
  (or (not (cell (board ?B) (row ?S) (col ?C))) 
      (cell (board ?B) (row ?S) (col ?C) (adj_net no)))
  (or (not (cell (board ?B) (row ?R) (col ?E))) 
      (cell (board ?B) (row ?R) (col ?E) (adj_net no)))
  (or (not (cell (row ?R) (col ?W))) 
      (cell (board ?B) (row ?R) (col ?W) (adj_net no)))
=>
  (modify ?Current (adj_net no))
)

(defrule kill-dead-end-west "Rule for eliminating west dead ends in the adjacency network."
  (board (board ?B))
  (solution_found (board ?B))
  ?Current <- (cell (board ?B) (row ?R) (col ?C) (north ?N) (south ?S) (east ?E)
              (west ?W) (contents o) (adj_net yes))
			  
  (cell (board ?B) (row ?R) (col ?E) (adj_net yes))
  (or (not (cell (board ?B) (row ?N) (col ?C))) 
      (cell (board ?B) (row ?N) (col ?C) (adj_net no)))
  (or (not (cell (board ?B) (row ?S) (col ?C)))
      (cell (board ?B) (row ?S) (col ?C) (adj_net no)))
  (or (not (cell (board ?B) (row ?R) (col ?W))) 
      (cell (board ?B) (row ?R) (col ?W) (adj_net no)))
=>
  (modify ?Current (adj_net no))
)

(defrule kill-dead-end-east "Rule for eliminating east dead ends in the adjacency network."
  (board (board ?B))
  (solution_found (board ?B))
  ?Current <- (cell (board ?B) (row ?R) (col ?C) (north ?N) (south ?S) (east ?E)
              (west ?W) (contents o) (adj_net yes))
			  
  (cell (board ?B) (row ?R) (col ?W) (adj_net yes))
  (or (not (cell (board ?B) (row ?N) (col ?C))) 
      (cell (board ?B) (row ?N) (col ?C) (adj_net no)))
  (or (not (cell (board ?B) (row ?S) (col ?C))) 
      (cell (board ?B) (row ?S) (col ?C) (adj_net no)))
  (or (not (cell (board ?B) (row ?R) (col ?E))) 
      (cell (board ?B) (row ?R) (col ?E) (adj_net no)))
=>
  (modify ?Current (adj_net no))
)

;; STEP 3.2: ASSERT FINAL PATH IS READY ;;
(defrule final-path-finished "Rule that fires only when all dead ends are killed."
  (declare (salience -10)) ;; Low salience to ensure this rule fires only as the only option. ;;
  (board (board ?B))
  (solution_found (board ?B))
=>
  (printout t "Final path optimized on board " ?B ". Beginning to move block..." 
              crlf crlf)
  (assert (final_path_found (board ?B)))
)


;; STEP 4: MOVE THE BLOCK ;;


;; STEP 4.1: RULE FOR OVERALL GOAL ;;
(defrule check-solved "If this rule fires clean up occurs and the next board is considered."
  (declare (salience 100)) ;; High salience to stop the movement algorithm below. ;;
  ?Board <- (board (board ?B))
  ?Path <- (final_path_found (board ?B))
  ?Solution <- (solution_found (board ?B))
  ?Saved <- (saved (board ?B) (contents E))
=>
  (printout t "Board " ?B " has been solved." crlf crlf)  
  
  (assert (delete_moves (board ?B)))
  (retract ?Board)
  (retract ?Path)
  (retract ?Solution)
  (retract ?Saved)
)


;; STEP 4.2: RULES FOR MOVING THE BLOCK ;;


;; STEP 4.2.1: RULES FOR MOVING THE BLOCK TOWARD END ;;
(defrule move-toward-end-north  "Rule for moving north toward the 'E' block."
  (declare (salience 10)) ;; Elevated salience because this rule is preferred over general movement. ;;
  (board (board ?B))
  (final_path_found (board ?B))
  ?Saved <- (saved (board ?B) (contents ?Sav))
  ?BlockCell <- (cell (board ?B) (row ?R) (col ?C) (north ?N) (south ?S) (east ?E) 
                      (west ?W) (contents B)) 
  (cell (board ?B) (row ?EndR) (contents E))
  (test (< ?EndR ?R))
  (test (> ?N 0))
  ?NewCell <- (cell (board ?B) (row ?N) (col ?C) (contents ?New) (adj_net yes))  
  (not (previousMove (board ?B) (fromrow ?R) (torow ?N) (fromcol ?C) (tocol ?C)))
  (not (moved_away_from_end (board ?B) (dir S)))
=>
  (printout t "Moving block from row " ?R " col " ?C " to row " ?N " col " ?C "." crlf)
  (assert(print_board (board ?B)))
  
  (assert (cell (board ?B) (row ?R) (col ?C) (contents ?Sav)
          (north ?N) (south ?S) (east ?E) (west ?W) (searched yes)
  		  (in_final_path yes) (adj_net yes)))
  (modify ?Saved (contents ?New))
  (modify ?NewCell (contents B) (in_final_path yes))
  (retract ?BlockCell)
 
  (assert (previousMove (board ?B) (fromrow ?R) (torow ?N) (fromcol ?C) (tocol ?C)))
  (assert (reset_move_aways (board ?B) (dir E)))
  (assert (reset_move_aways (board ?B) (dir W)))
)
 
(defrule move-toward-end-south "Rule for moving south toward the 'E' block."
  (declare (salience 10)) ;; Elevated salience because this rule is preferred over general movement. ;;
  (board (board ?B))
  (final_path_found (board ?B))
  ?Saved <- (saved (board ?B) (contents ?Sav))
  ?BlockCell <- (cell (board ?B) (row ?R) (col ?C) (north ?N) (south ?S) (east ?E) 
                      (west ?W) (contents B)) 
  (cell (board ?B) (row ?EndR) (contents E))
  (test (> ?EndR ?R))
  (test (> ?S 0))
  ?NewCell <- (cell (board ?B) (row ?S) (col ?C) (contents ?New) (adj_net yes))  
  (not (previousMove (board ?B) (fromrow ?R) (torow ?S) (fromcol ?C) (tocol ?C)))
  (not (moved_away_from_end (board ?B) (dir N)))
=>
  (printout t "Moving block from row " ?R " col " ?C " to row " ?S " col " ?C "." crlf)
  (assert(print_board (board ?B)))
  
  (assert (cell (board ?B) (row ?R) (col ?C) (contents ?Sav)
          (north ?N) (south ?S) (east ?E) (west ?W) (searched yes) 
		  (in_final_path yes) (adj_net yes)))
  (modify ?Saved (contents ?New))
  (modify ?NewCell (contents B) (in_final_path yes))
  (retract ?BlockCell)
 
  (assert (previousMove (board ?B) (fromrow ?R) (torow ?S) (fromcol ?C) (tocol ?C)))
  (assert (reset_move_aways (board ?B) (dir E)))
  (assert (reset_move_aways (board ?B) (dir W)))
)

(defrule move-toward-end-west "Rule for moving west toward the 'E' block."
  (declare (salience 10)) ;; Elevated salience because this rule is preferred over general movement. ;;
  (board (board ?B))
  (final_path_found (board ?B))
  ?Saved <- (saved (board ?B) (contents ?Sav))
  ?BlockCell <- (cell (board ?B) (row ?R) (col ?C) (north ?N) (south ?S) (east ?E) 
                      (west ?W) (contents B)) 
  (cell (board ?B) (col ?EndC) (contents E))
  (test (< ?EndC ?C))
  (test (> ?W 0))
  ?NewCell <- (cell (board ?B) (row ?R) (col ?W) (contents ?New) (adj_net yes))  
  (not (previousMove (board ?B) (fromrow ?R) (torow ?R) (fromcol ?C) (tocol ?W)))
  (not (moved_away_from_end (board ?B) (dir E)))
=>
  (printout t "Moving block from row " ?R " col " ?C " to row " ?R " col " ?W "." crlf)
  (assert(print_board (board ?B)))
  
  (assert (cell (board ?B) (row ?R) (col ?C) (contents ?Sav)
          (north ?N) (south ?S) (east ?E) (west ?W) (searched yes)
		  (in_final_path yes) (adj_net yes)))
  (modify ?Saved (contents ?New))
  (modify ?NewCell (contents B) (in_final_path yes))
  (retract ?BlockCell)
 
  (assert (previousMove (board ?B) (fromrow ?R) (torow ?R) (fromcol ?C) (tocol ?W)))
  (assert (reset_move_aways (board ?B) (dir N)))
  (assert (reset_move_aways (board ?B) (dir S)))
)

(defrule move-toward-end-east "Rule for moving east toward the 'E' block."
  (declare (salience 10)) ;; Elevated salience because this rule is preferred over general movement. ;;
  (board (board ?B))
  (final_path_found (board ?B))
  ?Saved <- (saved (board ?B) (contents ?Sav))
  ?BlockCell <- (cell (board ?B) (row ?R) (col ?C) (north ?N) (south ?S) (east ?E) 
                      (west ?W) (contents B)) 
  (cell (board ?B) (col ?EndC) (contents E))
  (test (> ?EndC ?C))
  (test (> ?E 0))
  ?NewCell <- (cell (board ?B) (row ?R) (col ?E) (contents ?New) (adj_net yes))  
  (not (previousMove (board ?B) (fromrow ?R) (torow ?R) (fromcol ?C) (tocol ?E)))
  (not (moved_away_from_end (board ?B) (dir W)))
=>
  (printout t "Moving block from row " ?R " col " ?C " to row " ?R " col " ?E "." crlf)
  (assert(print_board (board ?B)))
  
  (assert (cell (board ?B) (row ?R) (col ?C) (contents ?Sav)
          (north ?N) (south ?S) (east ?E) (west ?W) (searched yes) 
		  (in_final_path yes) (adj_net yes)))
  (modify ?Saved (contents ?New))
  (modify ?NewCell (contents B) (in_final_path yes))
  (retract ?BlockCell)
 
  (assert (previousMove (board ?B) (fromrow ?R) (torow ?R) (fromcol ?C) (tocol ?E)))
  (assert (reset_move_aways (board ?B) (dir N)))
  (assert (reset_move_aways (board ?B) (dir S)))
)

;; STEP 4.2.2: RULES FOR MOVING IN GENERAL ;;
(defrule move-north "General rule for moving block north."
  (board (board ?B))
  (final_path_found (board ?B))
  ?Saved <- (saved (board ?B) (contents ?Sav))
  ?BlockCell <- (cell (board ?B) (row ?R) (col ?C) (north ?N) (south ?S) (east ?E) 
                      (west ?W) (contents B)) 
  (test (> ?N 0))
  ?NewCell <- (cell (board ?B) (row ?N) (col ?C) (contents ?New) (adj_net yes))  
  (not (previousMove (board ?B) (fromrow ?R) (torow ?N) (fromcol ?C) (tocol ?C)))
=>
  (printout t "Moving block from row " ?R " col " ?C " to row " ?N " col " ?C "." crlf)
  (assert(print_board (board ?B)))
  
  (assert (cell (board ?B) (row ?R) (col ?C) (contents ?Sav)
          (north ?N) (south ?S) (east ?E) (west ?W) (searched yes) 
		  (in_final_path yes) (adj_net yes)))
  (modify ?Saved (contents ?New))
  (modify ?NewCell (contents B) (in_final_path yes))
  (retract ?BlockCell)
 
  (assert (previousMove (board ?B) (fromrow ?R) (torow ?N) (fromcol ?C) (tocol ?C)))
  (assert (moved_away_from_end (board ?B) (dir N)))
  (assert (reset_move_aways (board ?B) (dir E)))
  (assert (reset_move_aways (board ?B) (dir W)))
)
 
(defrule move-south "General rule for moving block south."
  (board (board ?B))
  (final_path_found (board ?B))
  ?Saved <- (saved (board ?B) (contents ?Sav))
  ?BlockCell <- (cell (board ?B) (row ?R) (col ?C) (north ?N) (south ?S) (east ?E) 
                      (west ?W) (contents B)) 
  (test (> ?S 0))
  ?NewCell <- (cell (board ?B) (row ?S) (col ?C) (contents ?New) (adj_net yes))  
  (not (previousMove (board ?B) (fromrow ?R) (torow ?S) (fromcol ?C) (tocol ?C)))
=>
  (printout t "Moving block from row " ?R " col " ?C " to row " ?S " col " ?C "." crlf)
  (assert(print_board (board ?B)))
  
  (assert (cell (board ?B) (row ?R) (col ?C) (contents ?Sav)
          (north ?N) (south ?S) (east ?E) (west ?W) (searched yes)
		  (in_final_path yes) (adj_net yes)))
  (modify ?Saved (contents ?New))
  (modify ?NewCell (contents B) (in_final_path yes))
  (retract ?BlockCell)
 
  (assert (previousMove (board ?B) (fromrow ?R) (torow ?S) (fromcol ?C) (tocol ?C)))
  (assert (moved_away_from_end (board ?B) (dir S)))
  (assert (reset_move_aways (board ?B) (dir E)))
  (assert (reset_move_aways (board ?B) (dir W)))
)

(defrule move-west "General rule for moving block west."
  (board (board ?B))
  (final_path_found (board ?B))
  ?Saved <- (saved (board ?B) (contents ?Sav))
  ?BlockCell <- (cell (board ?B) (row ?R) (col ?C) (north ?N) (south ?S) (east ?E) 
                      (west ?W) (contents B)) 
  (test (> ?W 0))
  ?NewCell <- (cell (board ?B) (row ?R) (col ?W) (contents ?New) (adj_net yes))  
  (not (previousMove (board ?B) (fromrow ?R) (torow ?R) (fromcol ?C) (tocol ?W)))
=>
  (printout t "Moving block from row " ?R " col " ?C "to row " ?R " col " ?W "." crlf)
  (assert(print_board (board ?B)))
  
  (assert (cell (board ?B) (row ?R) (col ?C) (contents ?Sav)
          (north ?N) (south ?S) (east ?E) (west ?W) (searched yes) 
		  (in_final_path yes) (adj_net yes)))
  (modify ?Saved (contents ?New))
  (modify ?NewCell (contents B) (in_final_path yes))
  (retract ?BlockCell)
 
  (assert (previousMove (board ?B) (fromrow ?R) (torow ?R) (fromcol ?C) (tocol ?W)))
  (assert (moved_away_from_end (board ?B) (dir W)))
  (assert (reset_move_aways (board ?B) (dir N)))
  (assert (reset_move_aways (board ?B) (dir S)))
)

(defrule move-east "General rule for moving block east."
  (board (board ?B))
  (final_path_found (board ?B))
  ?Saved <- (saved (board ?B) (contents ?Sav))
  ?BlockCell <- (cell (board ?B) (row ?R) (col ?C) (north ?N) (south ?S) (east ?E) 
                      (west ?W) (contents B)) 
  (test (> ?E 0))
  ?NewCell <- (cell (board ?B) (row ?R) (col ?E) (contents ?New) (adj_net yes))  
  (not (previousMove (board ?B) (fromrow ?R) (torow ?R) (fromcol ?C) (tocol ?E)))
=>
  (printout t "Moving block from row " ?R " col " ?C "to row " ?R " col " ?E "." crlf)
  (assert(print_board (board ?B)))
  
  (assert (cell (board ?B) (row ?R) (col ?C) (contents ?Sav)
          (north ?N) (south ?S) (east ?E) (west ?W) (searched yes)
		  (in_final_path yes) (adj_net yes)))
  (modify ?Saved (contents ?New))
  (modify ?NewCell (contents B) (in_final_path yes))
  (retract ?BlockCell)
 
  (assert (previousMove (board ?B) (fromrow ?R) (torow ?R) (fromcol ?C) (tocol ?E)))
  (assert (moved_away_from_end (board ?B) (dir E)))
  (assert (reset_move_aways (board ?B) (dir N)))
  (assert (reset_move_aways (board ?B) (dir S)))
)

(defrule reset-move-aways "Rule for retracting move_away facts as necessary."
  (declare (salience 15)) ;; Salience higher than movement algorithm to ensure move away facts ;;
                          ;; are deleted immeaditely. ;;
  (reset_move_aways (board ?B) (dir ?D))
  ?MoveAway <- (moved_away_from_end (board ?B) (dir ?D))
=>
  (retract ?MoveAway)
)

;; -------------------------------------------------------------------------------------;;

;; BOARD PRINTING ;;
(defrule print-board "Rule for printing the board."
  (declare (salience 500)) ;; High Salience ensures this is the next rule to execute
                           ;; when a print_board fact is asserted.
  (board (board ?B))
  ?Command <- (print_board (board ?B))
  (cell (board ?B) (row 1) (col 1) (contents ?C1.1))
  (cell (board ?B) (row 1) (col 2) (contents ?C1.2))
  (cell (board ?B) (row 1) (col 3) (contents ?C1.3))
  (cell (board ?B) (row 1) (col 4) (contents ?C1.4))
  (cell (board ?B) (row 1) (col 5) (contents ?C1.5))
  (cell (board ?B) (row 1) (col 6) (contents ?C1.6))
  (cell (board ?B) (row 1) (col 7) (contents ?C1.7))
  (cell (board ?B) (row 1) (col 8) (contents ?C1.8))
  (cell (board ?B) (row 1) (col 9) (contents ?C1.9))
  (cell (board ?B) (row 1) (col 10) (contents ?C1.10))
  (cell (board ?B) (row 1) (col 11) (contents ?C1.11))
  (cell (board ?B) (row 2) (col 1) (contents ?C2.1))
  (cell (board ?B) (row 2) (col 2) (contents ?C2.2))
  (cell (board ?B) (row 2) (col 3) (contents ?C2.3))
  (cell (board ?B) (row 2) (col 4) (contents ?C2.4))
  (cell (board ?B) (row 2) (col 5) (contents ?C2.5))
  (cell (board ?B) (row 2) (col 6) (contents ?C2.6))
  (cell (board ?B) (row 2) (col 7) (contents ?C2.7))
  (cell (board ?B) (row 2) (col 8) (contents ?C2.8))
  (cell (board ?B) (row 2) (col 9) (contents ?C2.9))
  (cell (board ?B) (row 2) (col 10) (contents ?C2.10))
  (cell (board ?B) (row 2) (col 11) (contents ?C2.11))
  (cell (board ?B) (row 3) (col 1) (contents ?C3.1))
  (cell (board ?B) (row 3) (col 2) (contents ?C3.2))
  (cell (board ?B) (row 3) (col 3) (contents ?C3.3))
  (cell (board ?B) (row 3) (col 4) (contents ?C3.4))
  (cell (board ?B) (row 3) (col 5) (contents ?C3.5))
  (cell (board ?B) (row 3) (col 6) (contents ?C3.6))
  (cell (board ?B) (row 3) (col 7) (contents ?C3.7))
  (cell (board ?B) (row 3) (col 8) (contents ?C3.8))
  (cell (board ?B) (row 3) (col 9) (contents ?C3.9))
  (cell (board ?B) (row 3) (col 10) (contents ?C3.10))
  (cell (board ?B) (row 3) (col 11) (contents ?C3.11))
  (cell (board ?B) (row 4) (col 1) (contents ?C4.1))
  (cell (board ?B) (row 4) (col 2) (contents ?C4.2))
  (cell (board ?B) (row 4) (col 3) (contents ?C4.3))
  (cell (board ?B) (row 4) (col 4) (contents ?C4.4))
  (cell (board ?B) (row 4) (col 5) (contents ?C4.5))
  (cell (board ?B) (row 4) (col 6) (contents ?C4.6))
  (cell (board ?B) (row 4) (col 7) (contents ?C4.7))
  (cell (board ?B) (row 4) (col 8) (contents ?C4.8))
  (cell (board ?B) (row 4) (col 9) (contents ?C4.9))
  (cell (board ?B) (row 4) (col 10) (contents ?C4.10))
  (cell (board ?B) (row 4) (col 11) (contents ?C4.11))
  (cell (board ?B) (row 5) (col 1) (contents ?C5.1))
  (cell (board ?B) (row 5) (col 2) (contents ?C5.2))
  (cell (board ?B) (row 5) (col 3) (contents ?C5.3))
  (cell (board ?B) (row 5) (col 4) (contents ?C5.4))
  (cell (board ?B) (row 5) (col 5) (contents ?C5.5))
  (cell (board ?B) (row 5) (col 6) (contents ?C5.6))
  (cell (board ?B) (row 5) (col 7) (contents ?C5.7))
  (cell (board ?B) (row 5) (col 8) (contents ?C5.8))
  (cell (board ?B) (row 5) (col 9) (contents ?C5.9))
  (cell (board ?B) (row 5) (col 10) (contents ?C5.10))
  (cell (board ?B) (row 5) (col 11) (contents ?C5.11))
  (cell (board ?B) (row 6) (col 1) (contents ?C6.1))
  (cell (board ?B) (row 6) (col 2) (contents ?C6.2))
  (cell (board ?B) (row 6) (col 3) (contents ?C6.3))
  (cell (board ?B) (row 6) (col 4) (contents ?C6.4))
  (cell (board ?B) (row 6) (col 5) (contents ?C6.5))
  (cell (board ?B) (row 6) (col 6) (contents ?C6.6))
  (cell (board ?B) (row 6) (col 7) (contents ?C6.7))
  (cell (board ?B) (row 6) (col 8) (contents ?C6.8))
  (cell (board ?B) (row 6) (col 9) (contents ?C6.9))
  (cell (board ?B) (row 6) (col 10) (contents ?C6.10))
  (cell (board ?B) (row 6) (col 11) (contents ?C6.11))
  (cell (board ?B) (row 7) (col 1) (contents ?C7.1))
  (cell (board ?B) (row 7) (col 2) (contents ?C7.2))
  (cell (board ?B) (row 7) (col 3) (contents ?C7.3))
  (cell (board ?B) (row 7) (col 4) (contents ?C7.4))
  (cell (board ?B) (row 7) (col 5) (contents ?C7.5))
  (cell (board ?B) (row 7) (col 6) (contents ?C7.6))
  (cell (board ?B) (row 7) (col 7) (contents ?C7.7))
  (cell (board ?B) (row 7) (col 8) (contents ?C7.8))
  (cell (board ?B) (row 7) (col 9) (contents ?C7.9))
  (cell (board ?B) (row 7) (col 10) (contents ?C7.10))
  (cell (board ?B) (row 7) (col 11) (contents ?C7.11))
  (cell (board ?B) (row 8) (col 1) (contents ?C8.1))
  (cell (board ?B) (row 8) (col 2) (contents ?C8.2))
  (cell (board ?B) (row 8) (col 3) (contents ?C8.3))
  (cell (board ?B) (row 8) (col 4) (contents ?C8.4))
  (cell (board ?B) (row 8) (col 5) (contents ?C8.5))
  (cell (board ?B) (row 8) (col 6) (contents ?C8.6))
  (cell (board ?B) (row 8) (col 7) (contents ?C8.7))
  (cell (board ?B) (row 8) (col 8) (contents ?C8.8))
  (cell (board ?B) (row 8) (col 9) (contents ?C8.9))
  (cell (board ?B) (row 8) (col 10) (contents ?C8.10))
  (cell (board ?B) (row 8) (col 11) (contents ?C8.11))
  (cell (board ?B) (row 9) (col 1) (contents ?C9.1))
  (cell (board ?B) (row 9) (col 2) (contents ?C9.2))
  (cell (board ?B) (row 9) (col 3) (contents ?C9.3))
  (cell (board ?B) (row 9) (col 4) (contents ?C9.4))
  (cell (board ?B) (row 9) (col 5) (contents ?C9.5))
  (cell (board ?B) (row 9) (col 6) (contents ?C9.6))
  (cell (board ?B) (row 9) (col 7) (contents ?C9.7))
  (cell (board ?B) (row 9) (col 8) (contents ?C9.8))
  (cell (board ?B) (row 9) (col 9) (contents ?C9.9))
  (cell (board ?B) (row 9) (col 10) (contents ?C9.10))
  (cell (board ?B) (row 9) (col 11) (contents ?C9.11))
  (cell (board ?B) (row 10) (col 1) (contents ?C10.1))
  (cell (board ?B) (row 10) (col 2) (contents ?C10.2))
  (cell (board ?B) (row 10) (col 3) (contents ?C10.3))
  (cell (board ?B) (row 10) (col 4) (contents ?C10.4))
  (cell (board ?B) (row 10) (col 5) (contents ?C10.5))
  (cell (board ?B) (row 10) (col 6) (contents ?C10.6))
  (cell (board ?B) (row 10) (col 7) (contents ?C10.7))
  (cell (board ?B) (row 10) (col 8) (contents ?C10.8))
  (cell (board ?B) (row 10) (col 9) (contents ?C10.9))
  (cell (board ?B) (row 10) (col 10) (contents ?C10.10))
  (cell (board ?B) (row 10) (col 11) (contents ?C10.11))
  (cell (board ?B) (row 11) (col 1) (contents ?C11.1))
  (cell (board ?B) (row 11) (col 2) (contents ?C11.2))
  (cell (board ?B) (row 11) (col 3) (contents ?C11.3))
  (cell (board ?B) (row 11) (col 4) (contents ?C11.4))
  (cell (board ?B) (row 11) (col 5) (contents ?C11.5))
  (cell (board ?B) (row 11) (col 6) (contents ?C11.6))
  (cell (board ?B) (row 11) (col 7) (contents ?C11.7))
  (cell (board ?B) (row 11) (col 8) (contents ?C11.8))
  (cell (board ?B) (row 11) (col 9) (contents ?C11.9))
  (cell (board ?B) (row 11) (col 10) (contents ?C11.10))
  (cell (board ?B) (row 11) (col 11) (contents ?C11.11))
=>
  (printout t crlf
  ?C1.1 ?C1.2 ?C1.3 ?C1.4 ?C1.5 ?C1.6 ?C1.7 ?C1.8 ?C1.9 ?C1.10 ?C1.11 crlf
  ?C2.1 ?C2.2 ?C2.3 ?C2.4 ?C2.5 ?C2.6 ?C2.7 ?C2.8 ?C2.9 ?C2.10 ?C2.11 crlf
  ?C3.1 ?C3.2 ?C3.3 ?C3.4 ?C3.5 ?C3.6 ?C3.7 ?C3.8 ?C3.9 ?C3.10 ?C3.11 crlf
  ?C4.1 ?C4.2 ?C4.3 ?C4.4 ?C4.5 ?C4.6 ?C4.7 ?C4.8 ?C4.9 ?C4.10 ?C4.11 crlf
  ?C5.1 ?C5.2 ?C5.3 ?C5.4 ?C5.5 ?C5.6 ?C5.7 ?C5.8 ?C5.9 ?C5.10 ?C5.11 crlf
  ?C6.1 ?C6.2 ?C6.3 ?C6.4 ?C6.5 ?C6.6 ?C6.7 ?C6.8 ?C6.9 ?C6.10 ?C6.11 crlf
  ?C7.1 ?C7.2 ?C7.3 ?C7.4 ?C7.5 ?C7.6 ?C7.7 ?C7.8 ?C7.9 ?C7.10 ?C7.11 crlf
  ?C8.1 ?C8.2 ?C8.3 ?C8.4 ?C8.5 ?C8.6 ?C8.7 ?C8.8 ?C8.9 ?C8.10 ?C8.11 crlf
  ?C9.1 ?C9.2 ?C9.3 ?C9.4 ?C9.5 ?C9.6 ?C9.7 ?C9.8 ?C9.9 ?C9.10 ?C9.11 crlf
  ?C10.1 ?C10.2 ?C10.3 ?C10.4 ?C10.5 ?C10.6 ?C10.7 ?C10.8 ?C10.9 ?C10.10 ?C10.11 crlf
  ?C11.1 ?C11.2 ?C11.3 ?C11.4 ?C11.5 ?C11.6 ?C11.7 ?C11.8 ?C11.9 ?C11.10 ?C11.11 crlf
  crlf
  )
  
  (retract ?Command) ;; Now that the board has been printed, retract the print_board fact to continue ;;
                     ;; regular execution. ;;
)

;; CLEAN UP RULES ;;
(defrule delete-resets "First clean up rule. Removes reset command facts."
  (declare (salience 10)) ;; Clean up before looking at the next board. ;;
  (delete_moves (board ?B))
  ?Reset <- (reset_move_aways (board ?B))
=>
  (retract ?Reset)
)

(defrule delete-moves "Second clean up rule. Removes previousMove facts."
  (declare (salience 10)) ;; Clean up before looking at the next board. ;;
  (delete_moves (board ?B))
  ?Move <- (previousMove (board ?B))
=>
  (retract ?Move)
)

(defrule end-cleanup "Last clean up command. Retracts the fact that causes cleanup to occur."
  (declare (salience 10)) ;; Clean up before looking at the next board. ;;
  ?Command <- (delete_moves (board ?B))
  (not (previousMove (board ?B)))
=>
  (retract ?Command)
)

;; -------------------------------------------------------------------------------------;;

(deffacts boards "Contains all boards to be solved."
;; INITIAL FACT ;;
(starting)

;; BOARD 5 ;;
(cell (board 5) (row 1) (col 1) (south 2) (east 2))
(cell (board 5) (row 1) (col 2) (contents o) (south 2) (east 3) (west 1))
(cell (board 5) (row 1) (col 3) (south 2) (east 4) (west 2))
(cell (board 5) (row 1) (col 4) (contents o) (south 2) (east 5) (west 3))
(cell (board 5) (row 1) (col 5) (south 2) (east 6) (west 4))
(cell (board 5) (row 1) (col 6) (contents o) (south 2) (east 7) (west 5))
(cell (board 5) (row 1) (col 7) (south 2) (east 8) (west 6))
(cell (board 5) (row 1) (col 8) (contents o) (south 2) (east 9) (west 7))
(cell (board 5) (row 1) (col 9) (south 2) (east 10) (west 8))
(cell (board 5) (row 1) (col 10) (contents o) (south 2) (east 11) (west 9))
(cell (board 5) (row 1) (col 11) (south 2) (west 10))
(cell (board 5) (row 2) (col 1) (north 1) (south 3) (east 2))
(cell (board 5) (row 2) (col 2) (contents o) (north 1) (south 3) (east 3) (west 1))
(cell (board 5) (row 2) (col 3) (north 1) (south 3) (east 4) (west 2))
(cell (board 5) (row 2) (col 4) (contents o) (north 1) (south 3) (east 5) (west 3))
(cell (board 5) (row 2) (col 5) (north 1) (south 3) (east 6) (west 4))
(cell (board 5) (row 2) (col 6) (contents o) (north 1) (south 3) (east 7) (west 5))
(cell (board 5) (row 2) (col 7) (north 1) (south 3) (east 8) (west 6))
(cell (board 5) (row 2) (col 8) (contents o) (north 1) (south 3) (east 9) (west 7))
(cell (board 5) (row 2) (col 9) (north 1) (south 3) (east 10) (west 8))
(cell (board 5) (row 2) (col 10) (contents o) (north 1) (south 3) (east 11) (west 9))
(cell (board 5) (row 2) (col 11) (north 1) (south 3) (west 10))
(cell (board 5) (row 3) (col 1) (north 2) (south 4) (east 2))
(cell (board 5) (row 3) (col 2) (contents o) (north 2) (south 4) (east 3) (west 1))
(cell (board 5) (row 3) (col 3) (north 2) (south 4) (east 4) (west 2))
(cell (board 5) (row 3) (col 4) (contents o) (north 2) (south 4) (east 5) (west 3))
(cell (board 5) (row 3) (col 5) (north 2) (south 4) (east 6) (west 4))
(cell (board 5) (row 3) (col 6) (contents o) (north 2) (south 4) (east 7) (west 5))
(cell (board 5) (row 3) (col 7) (contents o) (north 2) (south 4) (east 8) (west 6))
(cell (board 5) (row 3) (col 8) (contents o) (north 2) (south 4) (east 9) (west 7))
(cell (board 5) (row 3) (col 9) (north 2) (south 4) (east 10) (west 8))
(cell (board 5) (row 3) (col 10) (contents o) (north 2) (south 4) (east 11) (west 9))
(cell (board 5) (row 3) (col 11) (north 2) (south 4) (west 10))
(cell (board 5) (row 4) (col 1) (north 3) (south 5) (east 2))
(cell (board 5) (row 4) (col 2) (contents o) (north 3) (south 5) (east 3) (west 1))
(cell (board 5) (row 4) (col 3) (north 3) (south 5) (east 4) (west 2))
(cell (board 5) (row 4) (col 4) (contents o) (north 3) (south 5) (east 5) (west 3))
(cell (board 5) (row 4) (col 5) (north 3) (south 5) (east 6) (west 4))
(cell (board 5) (row 4) (col 6) (contents o) (north 3) (south 5) (east 7) (west 5))
(cell (board 5) (row 4) (col 7) (north 3) (south 5) (east 8) (west 6))
(cell (board 5) (row 4) (col 8) (contents o) (north 3) (south 5) (east 9) (west 7))
(cell (board 5) (row 4) (col 9) (north 3) (south 5) (east 10) (west 8))
(cell (board 5) (row 4) (col 10) (contents o) (north 3) (south 5) (east 11) (west 9))
(cell (board 5) (row 4) (col 11) (north 3) (south 5) (west 10))
(cell (board 5) (row 5) (col 1) (north 4) (south 6) (east 2))
(cell (board 5) (row 5) (col 2) (contents o) (north 4) (south 6) (east 3) (west 1))
(cell (board 5) (row 5) (col 3) (north 4) (south 6) (east 4) (west 2))
(cell (board 5) (row 5) (col 4) (contents o) (north 4) (south 6) (east 5) (west 3))
(cell (board 5) (row 5) (col 5) (north 4) (south 6) (east 6) (west 4))
(cell (board 5) (row 5) (col 6) (contents o) (north 4) (south 6) (east 7) (west 5))
(cell (board 5) (row 5) (col 7) (north 4) (south 6) (west 6))
(cell (board 5) (row 5) (col 8) (contents o) (north 4) (south 6) (east 9) (west 7))
(cell (board 5) (row 5) (col 9) (north 4) (south 6) (east 10) (west 8))
(cell (board 5) (row 5) (col 10) (contents o) (north 4) (south 6) (east 11) (west 9))
(cell (board 5) (row 5) (col 11) (north 4) (south 6) (west 10))
(cell (board 5) (row 6) (col 1) (north 5) (south 7) (east 2))
(cell (board 5) (row 6) (col 2) (contents o) (north 5) (south 7) (east 3) (west 1))
(cell (board 5) (row 6) (col 3) (north 5) (south 7) (east 4) (west 2))
(cell (board 5) (row 6) (col 4) (contents o) (north 5) (south 7) (east 5) (west 3))
(cell (board 5) (row 6) (col 5) (contents o) (north 5) (south 7) (east 6) (west 4))
(cell (board 5) (row 6) (col 6) (contents S) (north 5) (south 7) (east 7) (west 5))
(cell (board 5) (row 6) (col 7) (north 5) (south 7) (east 8) (west 6))
(cell (board 5) (row 6) (col 8) (contents o) (north 5) (south 7) (east 9) (west 7))
(cell (board 5) (row 6) (col 9) (north 5) (south 7) (east 10) (west 8))
(cell (board 5) (row 6) (col 10) (contents o) (north 5) (south 7) (east 11) (west 9))
(cell (board 5) (row 6) (col 11) (north 5) (south 7) (west 10))
(cell (board 5) (row 7) (col 1) (north 6) (south 8) (east 2))
(cell (board 5) (row 7) (col 2) (contents o) (north 6) (south 8) (east 3) (west 1))
(cell (board 5) (row 7) (col 3) (north 6) (south 8) (east 4) (west 2))
(cell (board 5) (row 7) (col 4) (contents o) (north 6) (south 8) (east 5) (west 3))
(cell (board 5) (row 7) (col 5) (north 6) (south 8) (east 6) (west 4))
(cell (board 5) (row 7) (col 6) (contents o) (north 6) (south 8) (east 7) (west 5))
(cell (board 5) (row 7) (col 7) (north 6) (south 8) (east 8) (west 6))
(cell (board 5) (row 7) (col 8) (contents o) (north 6) (south 8) (east 9) (west 7))
(cell (board 5) (row 7) (col 9) (north 6) (south 8) (east 10) (west 8))
(cell (board 5) (row 7) (col 10) (contents o) (north 6) (south 8) (east 11) (west 9))
(cell (board 5) (row 7) (col 11) (north 6) (south 8) (west 10))
(cell (board 5) (row 8) (col 1) (north 7) (south 9) (east 2))
(cell (board 5) (row 8) (col 2) (contents o) (north 7) (south 9) (east 3) (west 1))
(cell (board 5) (row 8) (col 3) (north 7) (south 9) (east 4) (west 2))
(cell (board 5) (row 8) (col 4) (contents o) (north 7) (south 9) (east 5) (west 3))
(cell (board 5) (row 8) (col 5) (north 7) (south 9) (east 6) (west 4))
(cell (board 5) (row 8) (col 6) (contents o) (north 7) (south 9) (east 7) (west 5))
(cell (board 5) (row 8) (col 7) (north 7) (south 9) (east 8) (west 6))
(cell (board 5) (row 8) (col 8) (contents o) (north 7) (south 9) (east 9) (west 7))
(cell (board 5) (row 8) (col 9) (north 7) (south 9) (east 10) (west 8))
(cell (board 5) (row 8) (col 10) (contents o) (north 7) (south 9) (east 11) (west 9))
(cell (board 5) (row 8) (col 11) (north 7) (south 9) (west 10))
(cell (board 5) (row 9) (col 1) (north 8) (south 10) (east 2))
(cell (board 5) (row 9) (col 2) (contents o) (north 8) (south 10) (east 3) (west 1))
(cell (board 5) (row 9) (col 3) (north 8) (south 10) (east 4) (west 2))
(cell (board 5) (row 9) (col 4) (contents o) (north 8) (south 10) (east 5) (west 3))
(cell (board 5) (row 9) (col 5) (north 8) (south 10) (east 6) (west 4))
(cell (board 5) (row 9) (col 6) (contents o) (north 8) (south 10) (east 7) (west 5))
(cell (board 5) (row 9) (col 7) (north 8) (south 10) (east 8) (west 6))
(cell (board 5) (row 9) (col 8) (contents o) (north 8) (south 10) (east 9) (west 7))
(cell (board 5) (row 9) (col 9) (north 8) (south 10) (east 10) (west 8))
(cell (board 5) (row 9) (col 10) (contents o) (north 8) (south 10) (east 11) (west 9))
(cell (board 5) (row 9) (col 11) (north 8) (south 10) (west 10))
(cell (board 5) (row 10) (col 1) (north 9) (south 11) (east 2))
(cell (board 5) (row 10) (col 2) (contents o) (north 9) (south 11) (east 3) (west 1))
(cell (board 5) (row 10) (col 3) (north 9) (south 11) (east 4) (west 2))
(cell (board 5) (row 10) (col 4) (contents o) (north 9) (south 11) (east 5) (west 3))
(cell (board 5) (row 10) (col 5) (north 9) (south 11) (east 6) (west 4))
(cell (board 5) (row 10) (col 6) (contents o) (north 9) (south 11) (east 7) (west 5))
(cell (board 5) (row 10) (col 7) (north 9) (south 11) (east 8) (west 6))
(cell (board 5) (row 10) (col 8) (contents o) (north 9) (south 11) (east 9) (west 7))
(cell (board 5) (row 10) (col 9) (contents E) (north 9) (south 11) (east 10) (west 8))
(cell (board 5) (row 10) (col 10) (contents o) (north 9) (south 11) (east 11) (west 9))
(cell (board 5) (row 10) (col 11)	 (north 9) (south 11) (west 10))
(cell (board 5) (row 11) (col 1) (north 10) (east 2))
(cell (board 5) (row 11) (col 2) (contents o) (north 10) (east 3) (west 1))
(cell (board 5) (row 11) (col 3) (north 10) (east 4) (west 2))
(cell (board 5) (row 11) (col 4) (contents o) (north 10) (east 5) (west 3))
(cell (board 5) (row 11) (col 5) (north 10) (east 6) (west 4))
(cell (board 5) (row 11) (col 6) (north 10) (east 7) (west 5))
(cell (board 5) (row 11) (col 7) (north 10) (east 8) (west 6))
(cell (board 5) (row 11) (col 8) (contents o) (north 10) (east 9) (west 7))
(cell (board 5) (row 11) (col 9) (north 10) (east 10) (west 8))
(cell (board 5) (row 11) (col 10) (contents o) (north 10) (east 11) (west 9))
(cell (board 5) (row 11) (col 11) (north 10) (west 10))

;; BOARD 4 ;;
(cell (board 4) (row 1) (col 1) (south 2) (east 2))
(cell (board 4) (row 1) (col 2) (contents o) (south 2) (east 3) (west 1))
(cell (board 4) (row 1) (col 3) (south 2) (east 4) (west 2))
(cell (board 4) (row 1) (col 4) (contents o) (south 2) (east 5) (west 3))
(cell (board 4) (row 1) (col 5) (south 2) (east 6) (west 4))
(cell (board 4) (row 1) (col 6) (contents o) (south 2) (east 7) (west 5))
(cell (board 4) (row 1) (col 7) (south 2) (east 8) (west 6))
(cell (board 4) (row 1) (col 8) (contents o) (south 2) (east 9) (west 7))
(cell (board 4) (row 1) (col 9) (south 2) (east 10) (west 8))
(cell (board 4) (row 1) (col 10) (contents o) (south 2) (east 11) (west 9))
(cell (board 4) (row 1) (col 11) (south 2) (west 10))
(cell (board 4) (row 2) (col 1) (north 1) (south 3) (east 2))
(cell (board 4) (row 2) (col 2) (contents o) (north 1) (south 3) (east 3) (west 1))
(cell (board 4) (row 2) (col 3) (north 1) (south 3) (east 4) (west 2))
(cell (board 4) (row 2) (col 4) (contents o) (north 1) (south 3) (east 5) (west 3))
(cell (board 4) (row 2) (col 5) (north 1) (south 3) (east 6) (west 4))
(cell (board 4) (row 2) (col 6) (contents o) (north 1) (south 3) (east 7) (west 5))
(cell (board 4) (row 2) (col 7) (north 1) (south 3) (east 8) (west 6))
(cell (board 4) (row 2) (col 8) (contents o) (north 1) (south 3) (east 9) (west 7))
(cell (board 4) (row 2) (col 9) (north 1) (south 3) (east 10) (west 8))
(cell (board 4) (row 2) (col 10) (contents o) (north 1) (south 3) (east 11) (west 9))
(cell (board 4) (row 2) (col 11) (north 1) (south 3) (west 10))
(cell (board 4) (row 3) (col 1) (north 2) (south 4) (east 2))
(cell (board 4) (row 3) (col 2) (contents o) (north 2) (south 4) (east 3) (west 1))
(cell (board 4) (row 3) (col 3) (north 2) (south 4) (east 4) (west 2))
(cell (board 4) (row 3) (col 4) (contents o) (north 2) (south 4) (east 5) (west 3))
(cell (board 4) (row 3) (col 5) (north 2) (south 4) (east 6) (west 4))
(cell (board 4) (row 3) (col 6) (contents o) (north 2) (south 4) (east 7) (west 5))
(cell (board 4) (row 3) (col 7) (north 2) (south 4) (east 8) (west 6))
(cell (board 4) (row 3) (col 8) (contents o) (north 2) (south 4) (east 9) (west 7))
(cell (board 4) (row 3) (col 9) (north 2) (south 4) (east 10) (west 8))
(cell (board 4) (row 3) (col 10) (contents o) (north 2) (south 4) (east 11) (west 9))
(cell (board 4) (row 3) (col 11) (north 2) (south 4) (west 10))
(cell (board 4) (row 4) (col 1) (north 3) (south 5) (east 2))
(cell (board 4) (row 4) (col 2) (contents o) (north 3) (south 5) (east 3) (west 1))
(cell (board 4) (row 4) (col 3) (north 3) (south 5) (east 4) (west 2))
(cell (board 4) (row 4) (col 4) (contents o) (north 3) (south 5) (east 5) (west 3))
(cell (board 4) (row 4) (col 5) (north 3) (south 5) (east 6) (west 4))
(cell (board 4) (row 4) (col 6) (contents o) (north 3) (south 5) (east 7) (west 5))
(cell (board 4) (row 4) (col 7) (north 3) (south 5) (east 8) (west 6))
(cell (board 4) (row 4) (col 8) (contents o) (north 3) (south 5) (east 9) (west 7))
(cell (board 4) (row 4) (col 9) (north 3) (south 5) (east 10) (west 8))
(cell (board 4) (row 4) (col 10) (contents o) (north 3) (south 5) (east 11) (west 9))
(cell (board 4) (row 4) (col 11) (north 3) (south 5) (west 10))
(cell (board 4) (row 5) (col 1) (north 4) (south 6) (east 2))
(cell (board 4) (row 5) (col 2) (contents o) (north 4) (south 6) (east 3) (west 1))
(cell (board 4) (row 5) (col 3) (north 4) (south 6) (east 4) (west 2))
(cell (board 4) (row 5) (col 4) (contents o) (north 4) (south 6) (east 5) (west 3))
(cell (board 4) (row 5) (col 5) (north 4) (south 6) (east 6) (west 4))
(cell (board 4) (row 5) (col 6) (contents o) (north 4) (south 6) (east 7) (west 5))
(cell (board 4) (row 5) (col 7) (north 4) (south 6) (west 6))
(cell (board 4) (row 5) (col 8) (contents o) (north 4) (south 6) (east 9) (west 7))
(cell (board 4) (row 5) (col 9) (north 4) (south 6) (east 10) (west 8))
(cell (board 4) (row 5) (col 10) (contents o) (north 4) (south 6) (east 11) (west 9))
(cell (board 4) (row 5) (col 11) (north 4) (south 6) (west 10))
(cell (board 4) (row 6) (col 1) (north 5) (south 7) (east 2))
(cell (board 4) (row 6) (col 2) (contents o) (north 5) (south 7) (east 3) (west 1))
(cell (board 4) (row 6) (col 3) (north 5) (south 7) (east 4) (west 2))
(cell (board 4) (row 6) (col 4) (contents o) (north 5) (south 7) (east 5) (west 3))
(cell (board 4) (row 6) (col 5) (contents o) (north 5) (south 7) (east 6) (west 4))
(cell (board 4) (row 6) (col 6) (contents S) (north 5) (south 7) (east 7) (west 5))
(cell (board 4) (row 6) (col 7) (north 5) (south 7) (east 8) (west 6))
(cell (board 4) (row 6) (col 8) (contents o) (north 5) (south 7) (east 9) (west 7))
(cell (board 4) (row 6) (col 9) (north 5) (south 7) (east 10) (west 8))
(cell (board 4) (row 6) (col 10) (contents o) (north 5) (south 7) (east 11) (west 9))
(cell (board 4) (row 6) (col 11) (north 5) (south 7) (west 10))
(cell (board 4) (row 7) (col 1) (north 6) (south 8) (east 2))
(cell (board 4) (row 7) (col 2) (contents o) (north 6) (south 8) (east 3) (west 1))
(cell (board 4) (row 7) (col 3) (north 6) (south 8) (east 4) (west 2))
(cell (board 4) (row 7) (col 4) (contents o) (north 6) (south 8) (east 5) (west 3))
(cell (board 4) (row 7) (col 5) (north 6) (south 8) (east 6) (west 4))
(cell (board 4) (row 7) (col 6) (contents o) (north 6) (south 8) (east 7) (west 5))
(cell (board 4) (row 7) (col 7) (north 6) (south 8) (east 8) (west 6))
(cell (board 4) (row 7) (col 8) (contents o) (north 6) (south 8) (east 9) (west 7))
(cell (board 4) (row 7) (col 9) (north 6) (south 8) (east 10) (west 8))
(cell (board 4) (row 7) (col 10) (contents o) (north 6) (south 8) (east 11) (west 9))
(cell (board 4) (row 7) (col 11) (north 6) (south 8) (west 10))
(cell (board 4) (row 8) (col 1) (north 7) (south 9) (east 2))
(cell (board 4) (row 8) (col 2) (contents o) (north 7) (south 9) (east 3) (west 1))
(cell (board 4) (row 8) (col 3) (north 7) (south 9) (east 4) (west 2))
(cell (board 4) (row 8) (col 4) (contents o) (north 7) (south 9) (east 5) (west 3))
(cell (board 4) (row 8) (col 5) (north 7) (south 9) (east 6) (west 4))
(cell (board 4) (row 8) (col 6) (contents o) (north 7) (south 9) (east 7) (west 5))
(cell (board 4) (row 8) (col 7) (north 7) (south 9) (east 8) (west 6))
(cell (board 4) (row 8) (col 8) (contents o) (north 7) (south 9) (east 9) (west 7))
(cell (board 4) (row 8) (col 9) (north 7) (south 9) (east 10) (west 8))
(cell (board 4) (row 8) (col 10) (contents o) (north 7) (south 9) (east 11) (west 9))
(cell (board 4) (row 8) (col 11) (north 7) (south 9) (west 10))
(cell (board 4) (row 9) (col 1) (north 8) (south 10) (east 2))
(cell (board 4) (row 9) (col 2) (contents o) (north 8) (south 10) (east 3) (west 1))
(cell (board 4) (row 9) (col 3) (north 8) (south 10) (east 4) (west 2))
(cell (board 4) (row 9) (col 4) (contents o) (north 8) (south 10) (east 5) (west 3))
(cell (board 4) (row 9) (col 5) (north 8) (south 10) (east 6) (west 4))
(cell (board 4) (row 9) (col 6) (contents o) (north 8) (south 10) (east 7) (west 5))
(cell (board 4) (row 9) (col 7) (north 8) (south 10) (east 8) (west 6))
(cell (board 4) (row 9) (col 8) (contents o) (north 8) (south 10) (east 9) (west 7))
(cell (board 4) (row 9) (col 9) (north 8) (south 10) (east 10) (west 8))
(cell (board 4) (row 9) (col 10) (contents o) (north 8) (south 10) (east 11) (west 9))
(cell (board 4) (row 9) (col 11) (north 8) (south 10) (west 10))
(cell (board 4) (row 10) (col 1) (north 9) (south 11) (east 2))
(cell (board 4) (row 10) (col 2) (contents E) (north 9) (south 11) (east 3) (west 1))
(cell (board 4) (row 10) (col 3) (north 9) (south 11) (east 4) (west 2))
(cell (board 4) (row 10) (col 4) (contents o) (north 9) (south 11) (east 5) (west 3))
(cell (board 4) (row 10) (col 5) (north 9) (south 11) (east 6) (west 4))
(cell (board 4) (row 10) (col 6) (contents o) (north 9) (south 11) (east 7) (west 5))
(cell (board 4) (row 10) (col 7) (north 9) (south 11) (east 8) (west 6))
(cell (board 4) (row 10) (col 8) (contents o) (north 9) (south 11) (east 9) (west 7))
(cell (board 4) (row 10) (col 9) (north 9) (south 11) (east 10) (west 8))
(cell (board 4) (row 10) (col 10) (contents o) (north 9) (south 11) (east 11) (west 9))
(cell (board 4) (row 10) (col 11) (north 9) (south 11) (west 10))
(cell (board 4) (row 11) (col 1) (north 10) (east 2))
(cell (board 4) (row 11) (col 2) (contents o) (north 10) (east 3) (west 1))
(cell (board 4) (row 11) (col 3) (north 10) (east 4) (west 2))
(cell (board 4) (row 11) (col 4) (contents o) (north 10) (east 5) (west 3))
(cell (board 4) (row 11) (col 5) (north 10) (east 6) (west 4))
(cell (board 4) (row 11) (col 6) (north 10) (east 7) (west 5))
(cell (board 4) (row 11) (col 7) (north 10) (east 8) (west 6))
(cell (board 4) (row 11) (col 8) (contents o) (north 10) (east 9) (west 7))
(cell (board 4) (row 11) (col 9) (north 10) (east 10) (west 8))
(cell (board 4) (row 11) (col 10) (contents o) (north 10) (east 11) (west 9))
(cell (board 4) (row 11) (col 11) (north 10) (west 10))

;; BOARD 3 ;;
(cell (board 3) (row 1) (col 1) (contents o) (south 2) (east 2))
(cell (board 3) (row 1) (col 2) (contents o) (south 2) (east 3) (west 1))
(cell (board 3) (row 1) (col 3) (south 2) (east 4) (west 2))
(cell (board 3) (row 1) (col 4) (contents o) (south 2) (east 5) (west 3))
(cell (board 3) (row 1) (col 5) (south 2) (east 6) (west 4))
(cell (board 3) (row 1) (col 6) (contents o) (south 2) (east 7) (west 5))
(cell (board 3) (row 1) (col 7) (south 2) (east 8) (west 6))
(cell (board 3) (row 1) (col 8) (contents o) (south 2) (east 9) (west 7))
(cell (board 3) (row 1) (col 9) (south 2) (east 10) (west 8))
(cell (board 3) (row 1) (col 10) (contents o) (south 2) (east 11) (west 9))
(cell (board 3) (row 1) (col 11) (south 2) (west 10))
(cell (board 3) (row 2) (col 1) (contents o) (north 1) (south 3) (east 2))
(cell (board 3) (row 2) (col 2) (north 1) (south 3) (east 3) (west 1))
(cell (board 3) (row 2) (col 3) (north 1) (south 3) (east 4) (west 2))
(cell (board 3) (row 2) (col 4) (contents o) (north 1) (south 3) (east 5) (west 3))
(cell (board 3) (row 2) (col 5) (contents o) (north 1) (south 3) (east 6) (west 4))
(cell (board 3) (row 2) (col 6) (contents o) (north 1) (south 3) (east 7) (west 5))
(cell (board 3) (row 2) (col 7) (north 1) (south 3) (east 8) (west 6))
(cell (board 3) (row 2) (col 8) (north 1) (south 3) (east 9) (west 7))
(cell (board 3) (row 2) (col 9) (north 1) (south 3) (east 10) (west 8))
(cell (board 3) (row 2) (col 10) (contents o) (north 1) (south 3) (east 11) (west 9))
(cell (board 3) (row 2) (col 11) (north 1) (south 3) (west 10))
(cell (board 3) (row 3) (col 1) (contents o) (north 2) (south 4) (east 2))
(cell (board 3) (row 3) (col 2) (contents o) (north 2) (south 4) (east 3) (west 1))
(cell (board 3) (row 3) (col 3) (contents o) (north 2) (south 4) (east 4) (west 2))
(cell (board 3) (row 3) (col 4) (north 2) (south 4) (east 5) (west 3))
(cell (board 3) (row 3) (col 5) (north 2) (south 4) (east 6) (west 4))
(cell (board 3) (row 3) (col 6) (contents o) (north 2) (south 4) (east 7) (west 5))
(cell (board 3) (row 3) (col 7) (north 2) (south 4) (east 8) (west 6))
(cell (board 3) (row 3) (col 8) (contents o) (north 2) (south 4) (east 9) (west 7))
(cell (board 3) (row 3) (col 9) (north 2) (south 4) (east 10) (west 8))
(cell (board 3) (row 3) (col 10) (contents o) (north 2) (south 4) (east 11) (west 9))
(cell (board 3) (row 3) (col 11) (north 2) (south 4) (west 10))
(cell (board 3) (row 4) (col 1) (north 3) (south 5) (east 2))
(cell (board 3) (row 4) (col 2) (north 3) (south 5) (east 3) (west 1))
(cell (board 3) (row 4) (col 3) (north 3) (south 5) (east 4) (west 2))
(cell (board 3) (row 4) (col 4) (north 3) (south 5) (east 5) (west 3))
(cell (board 3) (row 4) (col 5) (contents o) (north 3) (south 5) (east 6) (west 4))
(cell (board 3) (row 4) (col 6) (contents o) (north 3) (south 5) (east 7) (west 5))
(cell (board 3) (row 4) (col 7) (contents o) (north 3) (south 5) (east 8) (west 6))
(cell (board 3) (row 4) (col 8) (contents o) (north 3) (south 5) (east 9) (west 7))
(cell (board 3) (row 4) (col 9) (north 3) (south 5) (east 10) (west 8))
(cell (board 3) (row 4) (col 10) (contents o) (north 3) (south 5) (east 11) (west 9))
(cell (board 3) (row 4) (col 11) (north 3) (south 5) (west 10))
(cell (board 3) (row 5) (col 1) (contents o) (north 4) (south 6) (east 2))
(cell (board 3) (row 5) (col 2) (contents o) (north 4) (south 6) (east 3) (west 1))
(cell (board 3) (row 5) (col 3) (contents o) (north 4) (south 6) (east 4) (west 2))
(cell (board 3) (row 5) (col 4) (contents o) (north 4) (south 6) (east 5) (west 3))
(cell (board 3) (row 5) (col 5) (contents o) (north 4) (south 6) (east 6) (west 4))
(cell (board 3) (row 5) (col 6) (contents o) (north 4) (south 6) (east 7) (west 5))
(cell (board 3) (row 5) (col 7) (north 4) (south 6) (west 6))
(cell (board 3) (row 5) (col 8) (contents o) (north 4) (south 6) (east 9) (west 7))
(cell (board 3) (row 5) (col 9) (north 4) (south 6) (east 10) (west 8))
(cell (board 3) (row 5) (col 10) (contents o) (north 4) (south 6) (east 11) (west 9))
(cell (board 3) (row 5) (col 11) (north 4) (south 6) (west 10))
(cell (board 3) (row 6) (col 1) (north 5) (south 7) (east 2))
(cell (board 3) (row 6) (col 2) (contents o) (north 5) (south 7) (east 3) (west 1))
(cell (board 3) (row 6) (col 3) (north 5) (south 7) (east 4) (west 2))
(cell (board 3) (row 6) (col 4) (contents o) (north 5) (south 7) (east 5) (west 3))
(cell (board 3) (row 6) (col 5) (contents o) (north 5) (south 7) (east 6) (west 4))
(cell (board 3) (row 6) (col 6) (contents S) (north 5) (south 7) (east 7) (west 5))
(cell (board 3) (row 6) (col 7) (contents o) (north 5) (south 7) (east 8) (west 6))
(cell (board 3) (row 6) (col 8) (contents o) (north 5) (south 7) (east 9) (west 7))
(cell (board 3) (row 6) (col 9) (contents o) (north 5) (south 7) (east 10) (west 8))
(cell (board 3) (row 6) (col 10) (contents o) (north 5) (south 7) (east 11) (west 9))
(cell (board 3) (row 6) (col 11) (north 5) (south 7) (west 10))
(cell (board 3) (row 7) (col 1) (north 6) (south 8) (east 2))
(cell (board 3) (row 7) (col 2) (contents o) (north 6) (south 8) (east 3) (west 1))
(cell (board 3) (row 7) (col 3) (north 6) (south 8) (east 4) (west 2))
(cell (board 3) (row 7) (col 4) (contents o) (north 6) (south 8) (east 5) (west 3))
(cell (board 3) (row 7) (col 5) (north 6) (south 8) (east 6) (west 4))
(cell (board 3) (row 7) (col 6) (contents o) (north 6) (south 8) (east 7) (west 5))
(cell (board 3) (row 7) (col 7) (north 6) (south 8) (east 8) (west 6))
(cell (board 3) (row 7) (col 8) (contents o) (north 6) (south 8) (east 9) (west 7))
(cell (board 3) (row 7) (col 9) (north 6) (south 8) (east 10) (west 8))
(cell (board 3) (row 7) (col 10) (contents o) (north 6) (south 8) (east 11) (west 9))
(cell (board 3) (row 7) (col 11) (north 6) (south 8) (west 10))
(cell (board 3) (row 8) (col 1) (north 7) (south 9) (east 2))
(cell (board 3) (row 8) (col 2) (contents o) (north 7) (south 9) (east 3) (west 1))
(cell (board 3) (row 8) (col 3) (north 7) (south 9) (east 4) (west 2))
(cell (board 3) (row 8) (col 4) (contents o) (north 7) (south 9) (east 5) (west 3))
(cell (board 3) (row 8) (col 5) (north 7) (south 9) (east 6) (west 4))
(cell (board 3) (row 8) (col 6) (contents o) (north 7) (south 9) (east 7) (west 5))
(cell (board 3) (row 8) (col 7) (north 7) (south 9) (east 8) (west 6))
(cell (board 3) (row 8) (col 8) (north 7) (south 9) (east 9) (west 7))
(cell (board 3) (row 8) (col 9) (north 7) (south 9) (east 10) (west 8))
(cell (board 3) (row 8) (col 10) (contents o) (north 7) (south 9) (east 11) (west 9))
(cell (board 3) (row 8) (col 11) (contents E) (north 7) (south 9) (west 10))
(cell (board 3) (row 9) (col 1) (north 8) (south 10) (east 2))
(cell (board 3) (row 9) (col 2) (contents o) (north 8) (south 10) (east 3) (west 1))
(cell (board 3) (row 9) (col 3) (contents o) (north 8) (south 10) (east 4) (west 2))
(cell (board 3) (row 9) (col 4) (contents o) (north 8) (south 10) (east 5) (west 3))
(cell (board 3) (row 9) (col 5) (north 8) (south 10) (east 6) (west 4))
(cell (board 3) (row 9) (col 6) (north 8) (south 10) (east 7) (west 5))
(cell (board 3) (row 9) (col 7) (north 8) (south 10) (east 8) (west 6))
(cell (board 3) (row 9) (col 8) (contents o) (north 8) (south 10) (east 9) (west 7))
(cell (board 3) (row 9) (col 9) (contents o) (north 8) (south 10) (east 10) (west 8))
(cell (board 3) (row 9) (col 10) (contents o) (north 8) (south 10) (east 11) (west 9))
(cell (board 3) (row 9) (col 11) (north 8) (south 10) (west 10))
(cell (board 3) (row 10) (col 1) (north 9) (south 11) (east 2))
(cell (board 3) (row 10) (col 2) (contents o) (north 9) (south 11) (east 3) (west 1))
(cell (board 3) (row 10) (col 3) (north 9) (south 11) (east 4) (west 2))
(cell (board 3) (row 10) (col 4) (contents o) (north 9) (south 11) (east 5) (west 3))
(cell (board 3) (row 10) (col 5) (contents o) (north 9) (south 11) (east 6) (west 4))
(cell (board 3) (row 10) (col 6) (contents o) (north 9) (south 11) (east 7) (west 5))
(cell (board 3) (row 10) (col 7) (contents o) (north 9) (south 11) (east 8) (west 6))
(cell (board 3) (row 10) (col 8) (contents o) (north 9) (south 11) (east 9) (west 7))
(cell (board 3) (row 10) (col 9) (north 9) (south 11) (east 10) (west 8))
(cell (board 3) (row 10) (col 10) (contents o) (north 9) (south 11) (east 11) (west 9))
(cell (board 3) (row 10) (col 11) (north 9) (south 11) (west 10))
(cell (board 3) (row 11) (col 1) (north 10) (east 2))
(cell (board 3) (row 11) (col 2) (north 10) (east 3) (west 1))
(cell (board 3) (row 11) (col 3) (north 10) (east 4) (west 2))
(cell (board 3) (row 11) (col 4) (north 10) (east 5) (west 3))
(cell (board 3) (row 11) (col 5) (north 10) (east 6) (west 4))
(cell (board 3) (row 11) (col 6) (north 10) (east 7) (west 5))
(cell (board 3) (row 11) (col 7) (north 10) (east 8) (west 6))
(cell (board 3) (row 11) (col 8) (contents o) (north 10) (east 9) (west 7))
(cell (board 3) (row 11) (col 9) (north 10) (east 10) (west 8))
(cell (board 3) (row 11) (col 10) (contents o) (north 10) (east 11) (west 9))
(cell (board 3) (row 11) (col 11) (north 10) (west 10))

;; BOARD 2 ;;
(cell (board 2) (row 1) (col 1) (contents o) (south 2) (east 2))
(cell (board 2) (row 1) (col 2) (contents E) (south 2) (east 3) (west 1))
(cell (board 2) (row 1) (col 3) (south 2) (east 4) (west 2))
(cell (board 2) (row 1) (col 4) (contents o) (south 2) (east 5) (west 3))
(cell (board 2) (row 1) (col 5) (south 2) (east 6) (west 4))
(cell (board 2) (row 1) (col 6) (contents o) (south 2) (east 7) (west 5))
(cell (board 2) (row 1) (col 7) (south 2) (east 8) (west 6))
(cell (board 2) (row 1) (col 8) (contents o) (south 2) (east 9) (west 7))
(cell (board 2) (row 1) (col 9) (south 2) (east 10) (west 8))
(cell (board 2) (row 1) (col 10) (contents o) (south 2) (east 11) (west 9))
(cell (board 2) (row 1) (col 11) (south 2) (west 10))
(cell (board 2) (row 2) (col 1) (north 1) (south 3) (east 2))
(cell (board 2) (row 2) (col 2) (contents o) (north 1) (south 3) (east 3) (west 1))
(cell (board 2) (row 2) (col 3) (north 1) (south 3) (east 4) (west 2))
(cell (board 2) (row 2) (col 4) (contents o) (north 1) (south 3) (east 5) (west 3))
(cell (board 2) (row 2) (col 5) (north 1) (south 3) (east 6) (west 4))
(cell (board 2) (row 2) (col 6) (north 1) (south 3) (east 7) (west 5))
(cell (board 2) (row 2) (col 7) (north 1) (south 3) (east 8) (west 6))
(cell (board 2) (row 2) (col 8) (north 1) (south 3) (east 9) (west 7))
(cell (board 2) (row 2) (col 9) (north 1) (south 3) (east 10) (west 8))
(cell (board 2) (row 2) (col 10) (contents o) (north 1) (south 3) (east 11) (west 9))
(cell (board 2) (row 2) (col 11) (north 1) (south 3) (west 10))
(cell (board 2) (row 3) (col 1) (north 2) (south 4) (east 2))
(cell (board 2) (row 3) (col 2) (contents o) (north 2) (south 4) (east 3) (west 1))
(cell (board 2) (row 3) (col 3) (contents o) (north 2) (south 4) (east 4) (west 2))
(cell (board 2) (row 3) (col 4) (contents o)(north 2) (south 4) (east 5) (west 3))
(cell (board 2) (row 3) (col 5) (contents o) (north 2) (south 4) (east 6) (west 4))
(cell (board 2) (row 3) (col 6) (contents o) (north 2) (south 4) (east 7) (west 5))
(cell (board 2) (row 3) (col 7) (north 2) (south 4) (east 8) (west 6))
(cell (board 2) (row 3) (col 8) (contents o) (north 2) (south 4) (east 9) (west 7))
(cell (board 2) (row 3) (col 9) (north 2) (south 4) (east 10) (west 8))
(cell (board 2) (row 3) (col 10) (contents o) (north 2) (south 4) (east 11) (west 9))
(cell (board 2) (row 3) (col 11) (north 2) (south 4) (west 10))
(cell (board 2) (row 4) (col 1) (north 3) (south 5) (east 2))
(cell (board 2) (row 4) (col 2) (contents o) (north 3) (south 5) (east 3) (west 1))
(cell (board 2) (row 4) (col 3) (contents o) (north 3) (south 5) (east 4) (west 2))
(cell (board 2) (row 4) (col 4) (contents o) (north 3) (south 5) (east 5) (west 3))
(cell (board 2) (row 4) (col 5) (contents o) (north 3) (south 5) (east 6) (west 4))
(cell (board 2) (row 4) (col 6) (contents o) (north 3) (south 5) (east 7) (west 5))
(cell (board 2) (row 4) (col 7) (contents o) (north 3) (south 5) (east 8) (west 6))
(cell (board 2) (row 4) (col 8) (contents o) (north 3) (south 5) (east 9) (west 7))
(cell (board 2) (row 4) (col 9) (north 3) (south 5) (east 10) (west 8))
(cell (board 2) (row 4) (col 10) (contents o) (north 3) (south 5) (east 11) (west 9))
(cell (board 2) (row 4) (col 11) (north 3) (south 5) (west 10))
(cell (board 2) (row 5) (col 1) (contents o) (north 4) (south 6) (east 2))
(cell (board 2) (row 5) (col 2) (contents o) (north 4) (south 6) (east 3) (west 1))
(cell (board 2) (row 5) (col 3) (contents o) (north 4) (south 6) (east 4) (west 2))
(cell (board 2) (row 5) (col 4) (contents o) (north 4) (south 6) (east 5) (west 3))
(cell (board 2) (row 5) (col 5) (contents o) (north 4) (south 6) (east 6) (west 4))
(cell (board 2) (row 5) (col 6) (contents o) (north 4) (south 6) (east 7) (west 5))
(cell (board 2) (row 5) (col 7) (north 4) (south 6) (west 6))
(cell (board 2) (row 5) (col 8) (contents o) (north 4) (south 6) (east 9) (west 7))
(cell (board 2) (row 5) (col 9) (north 4) (south 6) (east 10) (west 8))
(cell (board 2) (row 5) (col 10) (contents o) (north 4) (south 6) (east 11) (west 9))
(cell (board 2) (row 5) (col 11) (north 4) (south 6) (west 10))
(cell (board 2) (row 6) (col 1) (north 5) (south 7) (east 2))
(cell (board 2) (row 6) (col 2) (contents o) (north 5) (south 7) (east 3) (west 1))
(cell (board 2) (row 6) (col 3) (north 5) (south 7) (east 4) (west 2))
(cell (board 2) (row 6) (col 4) (contents o) (north 5) (south 7) (east 5) (west 3))
(cell (board 2) (row 6) (col 5) (contents o) (north 5) (south 7) (east 6) (west 4))
(cell (board 2) (row 6) (col 6) (contents S) (north 5) (south 7) (east 7) (west 5))
(cell (board 2) (row 6) (col 7) (contents o) (north 5) (south 7) (east 8) (west 6))
(cell (board 2) (row 6) (col 8) (contents o) (north 5) (south 7) (east 9) (west 7))
(cell (board 2) (row 6) (col 9) (contents o) (north 5) (south 7) (east 10) (west 8))
(cell (board 2) (row 6) (col 10) (contents o) (north 5) (south 7) (east 11) (west 9))
(cell (board 2) (row 6) (col 11) (north 5) (south 7) (west 10))
(cell (board 2) (row 7) (col 1) (north 6) (south 8) (east 2))
(cell (board 2) (row 7) (col 2) (contents o) (north 6) (south 8) (east 3) (west 1))
(cell (board 2) (row 7) (col 3) (north 6) (south 8) (east 4) (west 2))
(cell (board 2) (row 7) (col 4) (contents o) (north 6) (south 8) (east 5) (west 3))
(cell (board 2) (row 7) (col 5) (north 6) (south 8) (east 6) (west 4))
(cell (board 2) (row 7) (col 6) (contents o) (north 6) (south 8) (east 7) (west 5))
(cell (board 2) (row 7) (col 7) (north 6) (south 8) (east 8) (west 6))
(cell (board 2) (row 7) (col 8) (contents o) (north 6) (south 8) (east 9) (west 7))
(cell (board 2) (row 7) (col 9) (north 6) (south 8) (east 10) (west 8))
(cell (board 2) (row 7) (col 10) (contents o) (north 6) (south 8) (east 11) (west 9))
(cell (board 2) (row 7) (col 11) (north 6) (south 8) (west 10))
(cell (board 2) (row 8) (col 1) (north 7) (south 9) (east 2))
(cell (board 2) (row 8) (col 2) (contents o) (north 7) (south 9) (east 3) (west 1))
(cell (board 2) (row 8) (col 3) (north 7) (south 9) (east 4) (west 2))
(cell (board 2) (row 8) (col 4) (contents o) (north 7) (south 9) (east 5) (west 3))
(cell (board 2) (row 8) (col 5) (north 7) (south 9) (east 6) (west 4))
(cell (board 2) (row 8) (col 6) (contents o)(north 7) (south 9) (east 7) (west 5))
(cell (board 2) (row 8) (col 7) (north 7) (south 9) (east 8) (west 6))
(cell (board 2) (row 8) (col 8) (contents o) (north 7) (south 9) (east 9) (west 7))
(cell (board 2) (row 8) (col 9) (north 7) (south 9) (east 10) (west 8))
(cell (board 2) (row 8) (col 10) (contents o) (north 7) (south 9) (east 11) (west 9))
(cell (board 2) (row 8) (col 11) (north 7) (south 9) (west 10))
(cell (board 2) (row 9) (col 1) (north 8) (south 10) (east 2))
(cell (board 2) (row 9) (col 2) (contents o) (north 8) (south 10) (east 3) (west 1))
(cell (board 2) (row 9) (col 3) (north 8) (south 10) (east 4) (west 2))
(cell (board 2) (row 9) (col 4) (north 8) (south 10) (east 5) (west 3))
(cell (board 2) (row 9) (col 5) (north 8) (south 10) (east 6) (west 4))
(cell (board 2) (row 9) (col 6) (north 8) (south 10) (east 7) (west 5))
(cell (board 2) (row 9) (col 7) (north 8) (south 10) (east 8) (west 6))
(cell (board 2) (row 9) (col 8) (north 8) (south 10) (east 9) (west 7))
(cell (board 2) (row 9) (col 9) (north 8) (south 10) (east 10) (west 8))
(cell (board 2) (row 9) (col 10) (contents o) (north 8) (south 10) (east 11) (west 9))
(cell (board 2) (row 9) (col 11) (north 8) (south 10) (west 10))
(cell (board 2) (row 10) (col 1) (north 9) (south 11) (east 2))
(cell (board 2) (row 10) (col 2) (contents o) (north 9) (south 11) (east 3) (west 1))
(cell (board 2) (row 10) (col 3) (north 9) (south 11) (east 4) (west 2))
(cell (board 2) (row 10) (col 4) (contents o) (north 9) (south 11) (east 5) (west 3))
(cell (board 2) (row 10) (col 5) (contents o) (north 9) (south 11) (east 6) (west 4))
(cell (board 2) (row 10) (col 6) (contents o) (north 9) (south 11) (east 7) (west 5))
(cell (board 2) (row 10) (col 7) (contents o) (north 9) (south 11) (east 8) (west 6))
(cell (board 2) (row 10) (col 8) (contents o) (north 9) (south 11) (east 9) (west 7))
(cell (board 2) (row 10) (col 9) (north 9) (south 11) (east 10) (west 8))
(cell (board 2) (row 10) (col 10) (contents o) (north 9) (south 11) (east 11) (west 9))
(cell (board 2) (row 10) (col 11) (north 9) (south 11) (west 10))
(cell (board 2) (row 11) (col 1) (north 10) (east 2))
(cell (board 2) (row 11) (col 2) (north 10) (east 3) (west 1))
(cell (board 2) (row 11) (col 3) (north 10) (east 4) (west 2))
(cell (board 2) (row 11) (col 4) (north 10) (east 5) (west 3))
(cell (board 2) (row 11) (col 5) (north 10) (east 6) (west 4))
(cell (board 2) (row 11) (col 6) (north 10) (east 7) (west 5))
(cell (board 2) (row 11) (col 7) (north 10) (east 8) (west 6))
(cell (board 2) (row 11) (col 8) (contents o) (north 10) (east 9) (west 7))
(cell (board 2) (row 11) (col 9) (north 10) (east 10) (west 8))
(cell (board 2) (row 11) (col 10) (contents o) (north 10) (east 11) (west 9))
(cell (board 2) (row 11) (col 11) (north 10) (west 10))

;; BOARD 1 ;;
(cell (board 1) (row 1) (col 1) (south 2) (east 2))
(cell (board 1) (row 1) (col 2) (contents o) (south 2) (east 3) (west 1))
(cell (board 1) (row 1) (col 3) (south 2) (east 4) (west 2))
(cell (board 1) (row 1) (col 4) (contents o) (south 2) (east 5) (west 3))
(cell (board 1) (row 1) (col 5) (south 2) (east 6) (west 4))
(cell (board 1) (row 1) (col 6) (contents o) (south 2) (east 7) (west 5))
(cell (board 1) (row 1) (col 7) (south 2) (east 8) (west 6))
(cell (board 1) (row 1) (col 8) (contents o) (south 2) (east 9) (west 7))
(cell (board 1) (row 1) (col 9) (south 2) (east 10) (west 8))
(cell (board 1) (row 1) (col 10) (contents o) (south 2) (east 11) (west 9))
(cell (board 1) (row 1) (col 11) (south 2) (west 10))
(cell (board 1) (row 2) (col 1) (north 1) (south 3) (east 2))
(cell (board 1) (row 2) (col 2) (contents o) (north 1) (south 3) (east 3) (west 1))
(cell (board 1) (row 2) (col 3) (north 1) (south 3) (east 4) (west 2))
(cell (board 1) (row 2) (col 4) (contents o) (north 1) (south 3) (east 5) (west 3))
(cell (board 1) (row 2) (col 5) (north 1) (south 3) (east 6) (west 4))
(cell (board 1) (row 2) (col 6) (contents o) (north 1) (south 3) (east 7) (west 5))
(cell (board 1) (row 2) (col 7) (north 1) (south 3) (east 8) (west 6))
(cell (board 1) (row 2) (col 8) (contents o) (north 1) (south 3) (east 9) (west 7))
(cell (board 1) (row 2) (col 9) (north 1) (south 3) (east 10) (west 8))
(cell (board 1) (row 2) (col 10) (contents o) (north 1) (south 3) (east 11) (west 9))
(cell (board 1) (row 2) (col 11) (north 1) (south 3) (west 10))
(cell (board 1) (row 3) (col 1) (north 2) (south 4) (east 2))
(cell (board 1) (row 3) (col 2) (contents o) (north 2) (south 4) (east 3) (west 1))
(cell (board 1) (row 3) (col 3) (north 2) (south 4) (east 4) (west 2))
(cell (board 1) (row 3) (col 4) (contents o) (north 2) (south 4) (east 5) (west 3))
(cell (board 1) (row 3) (col 5) (north 2) (south 4) (east 6) (west 4))
(cell (board 1) (row 3) (col 6) (contents o) (north 2) (south 4) (east 7) (west 5))
(cell (board 1) (row 3) (col 7) (north 2) (south 4) (east 8) (west 6))
(cell (board 1) (row 3) (col 8) (contents o) (north 2) (south 4) (east 9) (west 7))
(cell (board 1) (row 3) (col 9) (north 2) (south 4) (east 10) (west 8))
(cell (board 1) (row 3) (col 10) (contents o) (north 2) (south 4) (east 11) (west 9))
(cell (board 1) (row 3) (col 11) (north 2) (south 4) (west 10))
(cell (board 1) (row 4) (col 1) (north 3) (south 5) (east 2))
(cell (board 1) (row 4) (col 2) (contents o) (north 3) (south 5) (east 3) (west 1))
(cell (board 1) (row 4) (col 3) (north 3) (south 5) (east 4) (west 2))
(cell (board 1) (row 4) (col 4) (contents o) (north 3) (south 5) (east 5) (west 3))
(cell (board 1) (row 4) (col 5) (north 3) (south 5) (east 6) (west 4))
(cell (board 1) (row 4) (col 6) (contents o) (north 3) (south 5) (east 7) (west 5))
(cell (board 1) (row 4) (col 7) (north 3) (south 5) (east 8) (west 6))
(cell (board 1) (row 4) (col 8) (contents o) (north 3) (south 5) (east 9) (west 7))
(cell (board 1) (row 4) (col 9) (north 3) (south 5) (east 10) (west 8))
(cell (board 1) (row 4) (col 10) (contents o) (north 3) (south 5) (east 11) (west 9))
(cell (board 1) (row 4) (col 11) (north 3) (south 5) (west 10))
(cell (board 1) (row 5) (col 1) (north 4) (south 6) (east 2))
(cell (board 1) (row 5) (col 2) (contents o) (north 4) (south 6) (east 3) (west 1))
(cell (board 1) (row 5) (col 3) (north 4) (south 6) (east 4) (west 2))
(cell (board 1) (row 5) (col 4) (contents o) (north 4) (south 6) (east 5) (west 3))
(cell (board 1) (row 5) (col 5) (north 4) (south 6) (east 6) (west 4))
(cell (board 1) (row 5) (col 6) (contents o) (north 4) (south 6) (east 7) (west 5))
(cell (board 1) (row 5) (col 7) (north 4) (south 6) (west 6))
(cell (board 1) (row 5) (col 8) (contents o) (north 4) (south 6) (east 9) (west 7))
(cell (board 1) (row 5) (col 9) (north 4) (south 6) (east 10) (west 8))
(cell (board 1) (row 5) (col 10) (contents o) (north 4) (south 6) (east 11) (west 9))
(cell (board 1) (row 5) (col 11) (north 4) (south 6) (west 10))
(cell (board 1) (row 6) (col 1) (north 5) (south 7) (east 2))
(cell (board 1) (row 6) (col 2) (contents o) (north 5) (south 7) (east 3) (west 1))
(cell (board 1) (row 6) (col 3) (north 5) (south 7) (east 4) (west 2))
(cell (board 1) (row 6) (col 4) (contents o) (north 5) (south 7) (east 5) (west 3))
(cell (board 1) (row 6) (col 5) (contents o) (north 5) (south 7) (east 6) (west 4))
(cell (board 1) (row 6) (col 6) (contents S) (north 5) (south 7) (east 7) (west 5))
(cell (board 1) (row 6) (col 7) (north 5) (south 7) (east 8) (west 6))
(cell (board 1) (row 6) (col 8) (contents o) (north 5) (south 7) (east 9) (west 7))
(cell (board 1) (row 6) (col 9) (north 5) (south 7) (east 10) (west 8))
(cell (board 1) (row 6) (col 10) (contents o) (north 5) (south 7) (east 11) (west 9))
(cell (board 1) (row 6) (col 11) (north 5) (south 7) (west 10))
(cell (board 1) (row 7) (col 1) (north 6) (south 8) (east 2))
(cell (board 1) (row 7) (col 2) (contents o) (north 6) (south 8) (east 3) (west 1))
(cell (board 1) (row 7) (col 3) (north 6) (south 8) (east 4) (west 2))
(cell (board 1) (row 7) (col 4) (contents o) (north 6) (south 8) (east 5) (west 3))
(cell (board 1) (row 7) (col 5) (north 6) (south 8) (east 6) (west 4))
(cell (board 1) (row 7) (col 6) (contents o) (north 6) (south 8) (east 7) (west 5))
(cell (board 1) (row 7) (col 7) (north 6) (south 8) (east 8) (west 6))
(cell (board 1) (row 7) (col 8) (contents o) (north 6) (south 8) (east 9) (west 7))
(cell (board 1) (row 7) (col 9) (north 6) (south 8) (east 10) (west 8))
(cell (board 1) (row 7) (col 10) (contents o) (north 6) (south 8) (east 11) (west 9))
(cell (board 1) (row 7) (col 11) (north 6) (south 8) (west 10))
(cell (board 1) (row 8) (col 1) (north 7) (south 9) (east 2))
(cell (board 1) (row 8) (col 2) (contents o) (north 7) (south 9) (east 3) (west 1))
(cell (board 1) (row 8) (col 3) (north 7) (south 9) (east 4) (west 2))
(cell (board 1) (row 8) (col 4) (contents o) (north 7) (south 9) (east 5) (west 3))
(cell (board 1) (row 8) (col 5) (north 7) (south 9) (east 6) (west 4))
(cell (board 1) (row 8) (col 6) (contents o) (north 7) (south 9) (east 7) (west 5))
(cell (board 1) (row 8) (col 7) (north 7) (south 9) (east 8) (west 6))
(cell (board 1) (row 8) (col 8) (contents o) (north 7) (south 9) (east 9) (west 7))
(cell (board 1) (row 8) (col 9) (north 7) (south 9) (east 10) (west 8))
(cell (board 1) (row 8) (col 10) (contents o) (north 7) (south 9) (east 11) (west 9))
(cell (board 1) (row 8) (col 11) (north 7) (south 9) (west 10))
(cell (board 1) (row 9) (col 1) (north 8) (south 10) (east 2))
(cell (board 1) (row 9) (col 2) (contents o) (north 8) (south 10) (east 3) (west 1))
(cell (board 1) (row 9) (col 3) (north 8) (south 10) (east 4) (west 2))
(cell (board 1) (row 9) (col 4) (contents o) (north 8) (south 10) (east 5) (west 3))
(cell (board 1) (row 9) (col 5) (north 8) (south 10) (east 6) (west 4))
(cell (board 1) (row 9) (col 6) (contents o) (north 8) (south 10) (east 7) (west 5))
(cell (board 1) (row 9) (col 7) (north 8) (south 10) (east 8) (west 6))
(cell (board 1) (row 9) (col 8) (contents o) (north 8) (south 10) (east 9) (west 7))
(cell (board 1) (row 9) (col 9) (north 8) (south 10) (east 10) (west 8))
(cell (board 1) (row 9) (col 10) (contents o) (north 8) (south 10) (east 11) (west 9))
(cell (board 1) (row 9) (col 11) (north 8) (south 10) (west 10))
(cell (board 1) (row 10) (col 1) (north 9) (south 11) (east 2))
(cell (board 1) (row 10) (col 2) (contents o) (north 9) (south 11) (east 3) (west 1))
(cell (board 1) (row 10) (col 3) (north 9) (south 11) (east 4) (west 2))
(cell (board 1) (row 10) (col 4) (contents o) (north 9) (south 11) (east 5) (west 3))
(cell (board 1) (row 10) (col 5) (north 9) (south 11) (east 6) (west 4))
(cell (board 1) (row 10) (col 6) (contents o) (north 9) (south 11) (east 7) (west 5))
(cell (board 1) (row 10) (col 7) (north 9) (south 11) (east 8) (west 6))
(cell (board 1) (row 10) (col 8) (contents o) (north 9) (south 11) (east 9) (west 7))
(cell (board 1) (row 10) (col 9) (north 9) (south 11) (east 10) (west 8))
(cell (board 1) (row 10) (col 10) (contents o) (north 9) (south 11) (east 11) (west 9))
(cell (board 1) (row 10) (col 11) (north 9) (south 11) (west 10))
(cell (board 1) (row 11) (col 1) (north 10) (east 2))
(cell (board 1) (row 11) (col 2) (contents o) (north 10) (east 3) (west 1))
(cell (board 1) (row 11) (col 3) (north 10) (east 4) (west 2))
(cell (board 1) (row 11) (col 4) (contents o) (north 10) (east 5) (west 3))
(cell (board 1) (row 11) (col 5) (north 10) (east 6) (west 4))
(cell (board 1) (row 11) (col 6) (contents E) (north 10) (east 7) (west 5))
(cell (board 1) (row 11) (col 7) (north 10) (east 8) (west 6))
(cell (board 1) (row 11) (col 8) (contents o) (north 10) (east 9) (west 7))
(cell (board 1) (row 11) (col 9) (north 10) (east 10) (west 8))
(cell (board 1) (row 11) (col 10) (contents o) (north 10) (east 11) (west 9))
(cell (board 1) (row 11) (col 11) (north 10) (west 10))
)