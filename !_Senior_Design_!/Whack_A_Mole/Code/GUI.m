function varargout = GUI(varargin)
% GUI MATLAB code for GUI.fig
%      GUI, by itself, creates a new GUI or raises the existing
%      singleton*.
%
%      H = GUI returns the handle to a new GUI or the handle to
%      the existing singleton*.
%
%      GUI('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in GUI.M with the given input arguments.
%
%      GUI('Property','Value',...) creates a new GUI or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before GUI_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to GUI_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help GUI

% Last Modified by GUIDE v2.5 29-Nov-2015 18:18:27

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @GUI_OpeningFcn, ...
                   'gui_OutputFcn',  @GUI_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before GUI is made visible.
function GUI_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to GUI (see VARARGIN)

% Choose default command line output for GUI
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes GUI wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = GUI_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA);
% whackAMole();

% Connect to XPC.
tg = xpc;

% Play Whack-a-Mole.
whackAMole(tg, handles);

% --- Executes on button press in pushbutton2.
function pushbutton2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
tg = xpc;
tg.setparam(tg.getparamid('','seedc'),randi(1000));
tg.setparam(tg.getparamid('','seedn'),randi(1000));
fprintf('Seeded RNG!\n');

% --- Executes on button press in pushbutton3.
function pushbutton3_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%% Test QR decoding
% http://www.mathworks.com/matlabcentral/fileexchange/29239-qr-code-encode-
% and-decode
% by Lior Shapira 2010Nov
% edited by Matt Pepper 2012Nov

% WARNING SUPPRESSION ***************************************************
%this first warning warns the user that: there is a "core.jar" is
%already specified on static java path. Seeing as we don't use other java
%functions, we shouldn't have any conflict respecifying core.jar
s = warning('off','MATLAB:javaclasspath:jarAlreadySpecified');

%These javaaddpath cmds are the cause the suppressed warnings above and
%should point to the folder where you installed ZXing
javaaddpath('C:\Program Files (x86)\ZXing-2.0\zxing-2.0\core\core.jar');
javaaddpath('C:\Program Files (x86)\ZXing-2.0\zxing-2.0\javase\javase.jar');

%this second warning indicates an: Out of range value converted to
%intmin('uint8') or intmax('uint8'). This seems to be just a nanny alarm
%generated by decode_qr
r = warning('off','MATLAB:intConvertOverflow');

% CODE SECTION **********************************************************
% In this section, we will capture an image using the HP webcam and Matlab
% Image Acquisition Toolbox, then process it using decode_qr

encode = captureVideoFrame(2,2);

% Decode the QR code.
QR = decodeQR(encode);

% Parse the QR code.
[handles.rnd, handles.seq] = strtok(QR);
handles.round = str2num(handles.rnd);
handles.sequence = str2num(handles.seq);

% Find bound on sequence (Number of LEDs).
handles.bound = numel(handles.sequence);
if(handles.round == 1) 
    handles.bound = handles.bound / 2;
end

% Send round number to Simulink.
tg = xpc;
round = tg.getparamid('QRNum', 'Value');
tg.setparam(round, double(handles.round));

% Send QR to Simulink if round 1.
max = 20;
if(handles.round == 1)
    final = zeros(1, max);
    for i = 1:numel(handles.sequence)
        final(i) = handles.sequence(i);
    end
    
    seq = tg.getparamid('QRSeq', 'Value');
    tg.setparam(seq, final);
end

% Save handles.
guidata(hObject, handles); 

%reinitialize the warnings that were turned off above
warning(s);
warning(r);
